{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/newpost/newpost.component.css","webpack:///./src/app/components/newpost/newpost.component.html","webpack:///./src/app/components/newpost/newpost.component.ts","webpack:///./src/app/components/posts-comments/posts-comments.component.css","webpack:///./src/app/components/posts-comments/posts-comments.component.html","webpack:///./src/app/components/posts-comments/posts-comments.component.ts","webpack:///./src/app/components/posts-list/posts-list.component.css","webpack:///./src/app/components/posts-list/posts-list.component.html","webpack:///./src/app/components/posts-list/posts-list.component.ts","webpack:///./src/app/models/post-details.ts","webpack:///./src/app/services/posts-list.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<nav class=\\\"navbar navbar-expand-lg navbar-light bg-light\\\">\\n  <a class=\\\"navbar-brand text-info\\\" routerLink=\\\"\\\">Banyan Hill Test</a>\\n  <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarSupportedContent\\\" aria-controls=\\\"navbarSupportedContent\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\n  </button>\\n\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarSupportedContent\\\">\\n    <ul class=\\\"navbar-nav mr-auto\\\">\\n      <li class=\\\"nav-item active\\\">\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/postslist\\\" routerLinkActive=\\\"active\\\"> Posts List </a>\\n      </li>\\n      <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/newpost\\\" routerLinkActive=\\\"active\\\">New Post</a>\\n      </li>\\n    </ul>\\n  </div>\\n</nav>\\n\\n<router-outlet></router-outlet>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\nimport { NgbModule, NgbAlertConfig } from '@ng-bootstrap/ng-bootstrap';\nimport { Angular2FontawesomeModule } from 'angular2-fontawesome/angular2-fontawesome';\n\nimport { AppComponent } from './app.component';\nimport { NewpostComponent } from './components/newpost/newpost.component';\nimport { PostsListComponent } from './components/posts-list/posts-list.component';\nimport { PostsListService } from './services/posts-list.service';\nimport { PostsCommentsComponent } from './components/posts-comments/posts-comments.component';\n\n\n    const routes: Routes = [\n        {path: '', component: PostsListComponent},\n        {path: 'postslist', component: PostsListComponent},\n        {path: 'newpost', component: NewpostComponent},\n        {path: 'postcomment/:id', component: PostsCommentsComponent},\n    ];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NewpostComponent,\n    PostsListComponent,\n    PostsListComponent,\n    PostsCommentsComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule, \n    HttpClientModule,\n    Angular2FontawesomeModule,\n    NgbModule.forRoot(),\n    RouterModule.forRoot(routes),\n    CommonModule\n  ],\n  exports: [RouterModule],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  providers: [PostsListService, NgbAlertConfig],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"jumbotron\\\" style=\\\"width: 90%; margin-top: 10px !important; padding: 20px !important;\\\">\\n\\n            <form (ngSubmit)=\\\"insertPost(PostData);\\\" #formNewPost=\\\"ngForm\\\">\\n\\n                <div class=\\\"modal-header text-center\\\">\\n                    <h3>Add New Post</h3>\\n                    <h4 class=\\\"pull-right\\\" [hidden]=\\\"!inserted\\\">Record ID: <span class=\\\"badge badge-primary\\\">{{PostData.id}}</span></h4>\\n                </div>\\n\\n                <input type=\\\"hidden\\\" value=\\\"{{PostData.userId}}\\\"  name=\\\"userId\\\" [(ngModel)]=\\\"PostData.userId\\\"/>\\n                \\n                <div class=\\\"row\\\">\\n\\n                    <div class=\\\"col-lg-4 col-md-4\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label for=\\\"recipient-name\\\" class=\\\"col-form-label font-weight-bold\\\">User ID:</label>\\n                            <select class=\\\"form-control\\\" value=\\\"{{PostData.userId}}\\\" name=\\\"userId\\\" [(ngModel)]=\\\"PostData.userId\\\">\\n                                <option name=\\\"user\\\" value=\\\"1\\\">1</option>\\n                                <option name=\\\"user\\\" value=\\\"2\\\">2</option>\\n                                <option name=\\\"user\\\" value=\\\"3\\\">3</option>\\n                                <option name=\\\"user\\\" value=\\\"4\\\">4</option>\\n                                <option name=\\\"user\\\" value=\\\"5\\\">5</option>\\n                            </select>\\n                          </div>\\n                    </div>\\n\\n                    <div class=\\\"col-lg-8 col-md-8\\\">\\n                        <div class=\\\"form-group\\\">\\n                          <label for=\\\"recipient-name\\\" class=\\\"col-form-label font-weight-bold\\\">Title:</label>\\n                          <input type=\\\"text\\\" class=\\\"form-control\\\" value=\\\"{{PostData.title}}\\\" name=\\\"title\\\" [(ngModel)]=\\\"PostData.title\\\" required>\\n                        </div>\\n                    </div>\\n\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"message-text\\\" class=\\\"col-form-label font-weight-bold\\\">Body:</label>\\n                    <textarea class=\\\"form-control\\\" id=\\\"message-text\\\" rows=\\\"5\\\" name=\\\"body\\\" [(ngModel)]=\\\"PostData.body\\\" required>{{body}}</textarea>\\n                </div>\\n\\n                <div class=\\\"modal-footer\\\">\\n                    <div class=\\\"alert alert-primary text-center\\\" style=\\\"width: 100%;\\\"  [hidden]=\\\"!inserted\\\">\\n                      Post saved successful!.\\n                      <br>\\n                      <button type=\\\"button\\\" class=\\\"btn btn-secondary btn-sm text-center\\\" (click)=\\\"confirmIns()\\\"><i class=\\\"fas fa-check\\\"></i></button>\\n                    </div>\\n\\n                    <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" [disabled]=\\\"!formNewPost.form.valid\\\" [hidden]=\\\"inserted\\\"><i class=\\\"fa fa-save\\\"></i></button>\\n                    <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"confirmIns()\\\"[hidden]=\\\"inserted\\\" ><i class=\\\"fas fa-sign-out-alt\\\"></i>\\\"</button>\\n                </div>\\n            </form>\\n        </div>\\n    </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Config } from 'protractor';\nimport { PostsListService } from '../../services/posts-list.service';\nimport { PostDetails } from '../../models/post-details';\nimport { NgbModal, ModalDismissReasons } from '@ng-bootstrap/ng-bootstrap';\n\n\n@Component({\n    selector: 'app-newpost',\n    templateUrl: './newpost.component.html',\n    styleUrls: ['./newpost.component.css']\n})\nexport class NewpostComponent implements OnInit {\n\n    PostData = new PostDetails;\n    public loading: boolean;\n    public newpost: any;\n    public vari: string;\n    closeResult: string;\n    public inserted: boolean = false;\n\n  constructor(private srvPosts: PostsListService,\n              private modalService: NgbModal,\n              private router: Router) { }\n\n  ngOnInit() {\n  }\n\n\n//  insertPost(post: any) {\n//    console.log(post);\n//    if (this.srvPosts.insertPost(post)) {\n//      this.inserted = true;\n//\n//      console.log('Record Inserted')\n//    } else {\n//      this.inserted = false;\n//    }\n//};\n  \n  \n  insertPost(post: PostDetails) {\n    this.srvPosts.insertPost(post).subscribe(\n      post => {\n        console.log(post);\n        this.PostData.id = post.id;\n        this.inserted = true;\n      },\n      err => {\n        console.log(err);\n      }\n    );\n  }\n  \n\nprivate getDismissReason(reason: any): string {\n  if (reason === ModalDismissReasons.ESC) {\n    return 'by pressing ESC';\n  } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {\n    return 'by clicking on a backdrop';\n  } else {\n    return  `with: ${reason}`;\n  }\n  \n}\n\n\nconfirmIns(){\n  this.inserted = false;\n  this.router.navigateByUrl('/postslist');\n};\n\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"jumbotron\\\" style=\\\"width: 90%; margin-top: 10px !important; padding: 20px !important;\\\">    \\n            <div class=\\\"list-group\\\">\\n                <span class=\\\"list-group-item active\\\">\\n                    <span class=\\\"list-group-item-heading\\\">\\n                        <h4>Post Comments</h4>\\n                        <h4 class=\\\"pull-right\\\">{{postId}}</h4>\\n                    </span>\\n                    \\n                    <label class=\\\"list-group-item-text\\\" *ngFor=\\\"let itemm of postDet\\\"> {{itemm.title}}</label>\\n                </span>\\n                \\n                <div class=\\\"panel-body\\\">\\n                    <div class=\\\"list-group-item\\\" *ngFor=\\\"let item of commentList$ | async\\\" >\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-lg-2\\\" style=\\\"\\\"> <img src=\\\"../../images/bulldog.jpg\\\" width=\\\"100\\\" height=\\\"100\\\"></div>\\n                            <div class=\\\"col-lg-10\\\" style=\\\"\\\">\\n                                <div style=\\\"border-bottom: lavender solid 1px; margin-bottom: 10px;\\\"><strong>{{item.name}}</strong> <span>{{'  (' + item.email + ')'}}</span> <br> </div>\\n                                <span>{{item.body}}</span>\\n                            </div>\\n                        </div>  \\n                    </div>\\n                </div>\\n            </div>    \\n        </div>\\n    </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Observable } from 'rxjs';\nimport { PostsListService } from '../../services/posts-list.service';\nimport { PostComment } from '../../models/post-comment';\nimport { PostDetails } from '../../models/post-details';\n\n@Component({\n  selector: 'app-posts-comments',\n  templateUrl: './posts-comments.component.html',\n  styleUrls: ['./posts-comments.component.css']\n})\nexport class PostsCommentsComponent implements OnInit {\n\n    private postId: number;\n    postDet: {};\n    commentList$: Observable<PostComment[]>;\n    postById$: Observable<PostDetails[]>;\n    \n    \n    constructor(private postsList: PostsListService,\n                private route: ActivatedRoute) {}\n    \n    ngOnInit() {\n        //const queryParams = this.route.snapshot.queryParams\n        const routeParams = this.route.snapshot.params;\n\n        this.postId = routeParams.id;\n        \n        console.log(this.postId);\n        this.commentList$ = this.postsList.getPostsListComments(this.postId);        \n        //this.postById$ = this.postsList.getPostsListById(this.postId);\n        \n        \n        this.postsList.getPostsListById(this.postId)\n            .subscribe((data)=> {\n                this.postDet = data;\n                this.postDet = Array.of(this.postDet);\n                console.log(this.postDet);\n        });\n\n        \n    }\n   \n    \n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"jumbotron\\\" style=\\\"width: 90%; margin-top: 10px !important; padding: 20px !important;\\\">\\n\\n            <table class=\\\"table\\\" style=\\\"border: 1px solid grey;\\\">\\n\\n                <thead class=\\\"thead-dark\\\">\\n                    <tr>\\n                        <th colspan=\\\"4\\\" class=\\\"text-center\\\"> Posts List </th>\\n                    </tr>\\n                </thead>\\n\\n                <thead class=\\\"thead-dark\\\">\\n                  <tr>\\n                    <th scope=\\\"col\\\">ID</th>\\n                    <th scope=\\\"col\\\">Title</th>\\n                    <th scope=\\\"col\\\">Body</th>\\n                    <th scope=\\\"col\\\">Actions</th>\\n                  </tr>\\n                </thead>\\n                <tbody>\\n                    <tr *ngFor=\\\"let item of dataList$ | async\\\">\\n                    <th scope=\\\"row\\\">{{item.id}}</th>\\n                    <td>{{item.title.substr(0, 25) + ' ...'}}</td>\\n                    <td>{{item.body.substr(0, 40) + ' ...'}}</td>\\n                        <td>\\n                            <span class=\\\"btn btn-primary btn-sm\\\" type=\\\"button\\\" (click)=\\\"showRecordModal(item, updatePostModal )\\\"><i class=\\\"fas fa-edit \\\"></i></span>\\n                            <span class=\\\"btn btn-warning btn-sm\\\" type=\\\"button\\\" routerLink=\\\"/postcomment/{{item.id}}\\\" ><i class=\\\"fas fa-comments \\\"></i></span>\\n                        </td>\\n                    </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n    </div>\\n</div>\\n\\n\\n\\n<ng-template #updatePostModal let-c=\\\"close\\\" let-d=\\\"dismiss\\\">\\n\\n    <!-- Modal -->\\n    \\n    <div class=\\\"modal-dialog form-control\\\" role=\\\"document\\\" style=\\\"width: 95% !important; height: 95% !important;\\\">\\n        <div class=\\\"modal-content form-control\\\">\\n            <div class=\\\"modal-header\\\">\\n                <h5 class=\\\"modal-title font-weight-bold\\\" id=\\\"exampleModalLabel\\\">Edit Post</h5>\\n                <h5><span class=\\\"badge badge-primary\\\">{{post.id}}</span></h5>\\n            </div>\\n            <div class=\\\"modal-body\\\">\\n                <form>\\n                    <input type=\\\"hidden\\\" value=\\\"{{post.userId}}\\\" name=\\\"userId\\\" [(ngModel)]=\\\"post.userId\\\"/>\\n                    <input type=\\\"hidden\\\" value=\\\"{{post.id}}\\\" name=\\\"id\\\" [(ngModel)]=\\\"post.id\\\"/>\\n\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"recipient-name\\\" class=\\\"col-form-label font-weight-bold\\\">Title:</label>\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" value=\\\"{{post.title}}\\\" name=\\\"title\\\" [(ngModel)]=\\\"post.title\\\">\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"message-text\\\" class=\\\"col-form-label font-weight-bold\\\">Body:</label>\\n                        <textarea class=\\\"form-control\\\" id=\\\"message-text\\\" rows=\\\"5\\\" name=\\\"body\\\" [(ngModel)]=\\\"post.body\\\">{{post.body}}</textarea>\\n                    </div>\\n                </form>\\n            </div>\\n            <div class=\\\"modal-footer\\\">\\n                <div class=\\\"alert alert-primary text-center\\\" style=\\\"width: 100%;\\\"  [hidden]=\\\"!postUpdated\\\">\\n                    Post has been updated.\\n                    <br>\\n                    <button type=\\\"button\\\" class=\\\"btn btn-secondary btn-sm text-center\\\" (click)=\\\"confirmUpd()\\\"><i class=\\\"fas fa-check\\\"></i></button>\\n                </div>\\n\\n              <button type=\\\"button\\\" class=\\\"btn btn-success\\\" (click)=\\\"updatePost(post)\\\" [hidden]=\\\"postUpdated\\\"><i class=\\\"fa fa-save\\\"></i></button>\\n              <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"c('Close click')\\\"[hidden]=\\\"postUpdated\\\" ><i class=\\\"fas fa-sign-out-alt\\\"></i>\\\"</button>\\n            </div>\\n        </div>\\n    </div>\\n    \\n</ng-template>\"","import { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { PostsListService } from '../../services/posts-list.service';\nimport { Config } from 'protractor';\nimport { NgbModal, ModalDismissReasons } from '@ng-bootstrap/ng-bootstrap';\nimport {PostDetails} from '../../models/post-details';\n\n@Component({\n    selector: 'app-posts-list',\n    templateUrl: './posts-list.component.html',\n    styleUrls: ['./posts-list.component.css']\n})\n\nexport class PostsListComponent implements OnInit {\n\n    public post: any;\n    public vari: string;\n    public postUpdated: boolean = false;\n    closeResult: string;\n    dataList$: Observable<PostDetails[]>;\n\n    constructor(private postsList: PostsListService, \n                private modalService: NgbModal) {\n    }\n  \n    ngOnInit() {\n        this.dataList$ = this.postsList.getPostsList();\n    }\n    \n    showRecordModal(post: any, modal: string) {\n        this.post = post;\n        this.modalService.open(modal).result.then((result) => {\n            this.closeResult = `Closed with: ${result}`;\n        }, (reason) => {\n            this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;\n        });\n    }\n\n    private getDismissReason(reason: any): string {\n        if (reason === ModalDismissReasons.ESC) {\n            return 'by pressing ESC';\n        } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {\n            return 'by clicking on a backdrop';\n        } else {\n            return  `with: ${reason}`;\n        }\n    }\n\n    updatePost(post: any) {\n        if (this.postsList.updatePost(post)) {\n          this.postUpdated = true;\n          console.log('Record Updated')\n        } else {\n          this.postUpdated = false;\n        }\n    };\n\n    confirmUpd(){\n      this.postUpdated = false;\n    };\n\n\n    \n\n  \n\n\n\n}","export class PostDetails{\n    public userId: number;\n    public id: number;\n    public title: string;\n    public body: string;\n    \n}","import { Injectable } from '@angular/core';\nimport { NgModule } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Observable } from 'rxjs';\nimport { PostDetails } from '../models/post-details';\nimport { PostComment } from '../models/post-comment';\n\nconst httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostsListService {\n\n  constructor(private http: HttpClient) {}\n\n   apiUrl: string = \"https://jsonplaceholder.typicode.com/posts/\";\n\n    public datos: any;\n   \n    getPostsList(): Observable<PostDetails[]> {\n        return this.http.get<PostDetails[]>(this.apiUrl);\n    }\n    \n    getPostsListById(id: number): Observable<PostDetails[]> {\n        return this.http.get<PostDetails[]>(this.apiUrl + id);\n    }\n    \n    getPostsListComments(id: number): Observable<PostComment[]> {\n        return this.http.get<PostComment[]>(this.apiUrl + id + '/comments');\n    }\n    \n    insertPost(dataPost: PostDetails): Observable<PostDetails> {\n        \n        let httpHeaders = new HttpHeaders()\n            .set('Content-Type', 'application/json');   \n        let options = {\n            headers: httpHeaders\n        };        \n        return this.http.post<PostDetails>(this.apiUrl, dataPost, options);\n    }\n\n   deletePost() {}\n\n    updatePost(dataPost: any) {\n       console.log(dataPost);\n        let data = JSON.stringify(dataPost);\n        console.log('UPDATE');\n        console.log(data);\n        return this.http.put(this.apiUrl + dataPost.id, data, httpOptions);\n\n   }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}